plot2 <- SpatialFeaturePlot(seu, features = "nCount_Spatial") + theme(legend.position = "right")
wrap_plots(plot1, plot2)
p1 <- SpatialFeaturePlot(seu, features = "ACE", pt.size.factor = 1)
seu <- preprocess(seu)
# getting info
exp <- getExpression(seu)
# getting data and putting it into Seurat
data.dir <- "../Data/human_breast_cancer/raw_data"
seu <- Load10X_Spatial(
data.dir,
filename = "V1_Breast_Cancer_Block_A_Section_1_filtered_feature_bc_matrix.h5",
assay = "Spatial",
slice = "slice1",
bin.size = NULL,
filter.matrix = TRUE,
to.upper = FALSE,
image = NULL,
)
# Quality Control
plot1 <- VlnPlot(seu, features = "nCount_Spatial", pt.size = 0.1) + NoLegend()
plot2 <- SpatialFeaturePlot(seu, features = "nCount_Spatial") + theme(legend.position = "right")
wrap_plots(plot1, plot2)
seu[["percent.mt"]] <- PercentageFeatureSet(seu, pattern = "^MT-")  # mitochondrial genes
seu[["nFeature_Spatial"]] <- nFeature_RNA(seu)  # number of genes detected
VlnPlot(seu, features = c("nFeature_RNA", "nCount_RNA"), pt.size = 0.1)
VlnPlot(seu, features = c("nFeature_Spatial", "nCount_Spatial"), pt.size = 0.1)
seu[["percent.mt"]] <- PercentageFeatureSet(seu, pattern = "^MT-")
VlnPlot(seu, features = "percent.mt", pt.size = 0.1)
seu[["percent.mt"]] <- PercentageFeatureSet(seu, pattern = "^MT-")
VlnPlot(seu, features = c("nFeature_Spatial", "nCount_Spatial"), pt.size = 0.1)
seu <- Load10X_Spatial(
data.dir,
filename = "V1_Breast_Cancer_Block_A_Section_1_filtered_feature_bc_matrix.h5",
assay = "Spatial",
slice = "slice1",
bin.size = NULL,
filter.matrix = TRUE,
to.upper = FALSE,
image = NULL,
)
# getting data and putting it into Seurat
data.dir <- "../Data/human_breast_cancer/raw_data"
seu_raw <- Load10X_Spatial(
data.dir,
filename = "V1_Breast_Cancer_Block_A_Section_1_filtered_feature_bc_matrix.h5",
assay = "Spatial",
slice = "slice1",
bin.size = NULL,
filter.matrix = TRUE,
to.upper = FALSE,
image = NULL,
)
seu_raw[["percent.mt"]] <- PercentageFeatureSet(seu, pattern = "^MT-")
plot1 <- VlnPlot(seu_raw, features = "nCount_Spatial", pt.size = 0.1) + NoLegend()
plot2 <- SpatialFeaturePlot(seu_raw, features = "nCount_Spatial") + theme(legend.position = "right")
wrap_plots(plot1, plot2)
VlnPlot(seu_raw, features = c("nFeature_Spatial", "nCount_Spatial"), pt.size = 0.1)
plot2 <- SpatialFeaturePlot(seu_raw, features = "nCount_Spatial") + theme(legend.position = "right")
plot2 <- SpatialFeaturePlot(seu_raw, features = "nCount_Spatial") + theme(legend.position = "right")
wrap_plots(plot1, plot2)
VlnPlot(seu_raw, features = c("nFeature_Spatial", "nCount_Spatial"), pt.size = 0.1)
SpatialFeaturePlot(seu, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"))
SpatialFeaturePlot(seu, features = c("nFeature_Spatial", "nCount_Spatial", "percent.mt"))
seu_raw[["percent.mt"]] <- PercentageFeatureSet(seu, pattern = "^MT-")
SpatialFeaturePlot(seu, features = c("nFeature_Spatial", "nCount_Spatial", "percent.mt"))
SpatialFeaturePlot(seu_raw, features = c("nFeature_Spatial", "nCount_Spatial", "percent.mt"))
VlnPlot(seu_raw, features = "percent.mt", pt.size = 0.1)
VlnPlot(seu_raw, features = c("nFeature_Spatial", "nCount_Spatial"), pt.size = 0.1)
seu <- subset(seu_raw, subset =
nFeature_Spatial > 200 &
nFeature_Spatial < 9000 &
percent.mt < 8
)
SpatialFeaturePlot(seu_raw, features = c("nFeature_Spatial", "nCount_Spatial", "percent.mt"))
p1 <- SpatialFeaturePlot(seu_raw, features = "nFeature_Spatial") + ggtitle("before QC")
p2 <- SpatialFeaturePlot(seu, features = "nFeature_Spatial")+ ggtitle("after QC")
p1 + p2
seu <- NormalizeData(object = seu, normalization.method = "LogNormalize", scale.factor = 10000)
seu <- ScaleData(seu , verbose = FALSE)
seu <- FindVariableFeatures(seu)
preprocessNormalized(seu)
exp <- getExpression(seu)
source("STPrep.R")
exp <- getExpression(seu)
head(exp)
markers = getExpGenes(seu)
filtered_markers <- markers %>% filter(p_val_adj < 0.05)
DefaultAssay(seu) <- "Spatial"
exp <- getExpression(seu)
head(exp)
markers = getExpGenes(seu)
filtered_markers <- markers %>% filter(p_val_adj < 0.05)
rm(list = ls())
library(Seurat)
library(SeuratData)
library(ggplot2)
library(patchwork)
library(dplyr)
library(hdf5r)
library(rhdf5)
library(data.table)
source("STPrep.R")
# getting data and putting it into Seurat
data.dir <- "../Data/human_breast_cancer/raw_data"
seu_raw <- Load10X_Spatial(
data.dir,
filename = "V1_Breast_Cancer_Block_A_Section_1_filtered_feature_bc_matrix.h5",
assay = "Spatial",
slice = "slice1",
bin.size = NULL,
filter.matrix = TRUE,
to.upper = FALSE,
image = NULL,
)
# Quality Control
seu_raw[["percent.mt"]] <- PercentageFeatureSet(seu_raw, pattern = "^MT-")
VlnPlot(seu_raw, features = "percent.mt", pt.size = 0.1)
plot1 <- VlnPlot(seu_raw, features = "nCount_Spatial", pt.size = 0.1) + NoLegend()
plot2 <- SpatialFeaturePlot(seu_raw, features = "nCount_Spatial") + theme(legend.position = "right")
wrap_plots(plot1, plot2)
VlnPlot(seu_raw, features = c("nFeature_Spatial", "nCount_Spatial"), pt.size = 0.1)
seu <- subset(seu_raw, subset =
nFeature_Spatial > 200 &
nFeature_Spatial < 9000 &
percent.mt < 8
)
# getting info
seu <- NormalizeData(object = seu, normalization.method = "LogNormalize", scale.factor = 10000)
seu <- ScaleData(seu , verbose = FALSE)
seu <- FindVariableFeatures(seu)
preprocessNormalized(seu)
DefaultAssay(seu) <- "Spatial"
exp <- getExpression(seu)
markers = getExpGenes(seu)
filtered_markers <- markers %>% filter(p_val_adj < 0.05)
markers = getExpGenes(seu)
Assays(seu)
Layers(seu)
seu <- subset(seu_raw, subset =
nFeature_Spatial > 200 &
nFeature_Spatial < 9000 &
percent.mt < 8
)
# getting info
DefaultAssay(seu) <- "Spatial"
seu <- NormalizeData(object = seu, normalization.method = "LogNormalize", scale.factor = 10000)
seu <- ScaleData(seu , verbose = FALSE)
seu <- FindVariableFeatures(seu)
preprocessNormalized(seu)
exp <- getExpression(seu)
markers = getExpGenes(seu)
levels(Idents(seu))
seu <- preprocessNormalized(seu)
exp <- getExpression(seu)
markers = getExpGenes(seu)
filtered_markers <- markers %>% filter(p_val_adj < 0.05)
marker_genes <- unique(filtered_markers$gene)
marker_expr <- exp[rownames(exp) %in% marker_genes, ,drop = FALSE]
marker_expr_df <- as.data.frame(as.matrix(marker_expr))
marker_expr_df$gene <- rownames(marker_expr_df)
marker_expr_df <- marker_expr_df[, c("gene", setdiff(names(marker_expr_df), "gene"))]
fwrite(marker_expr_df, "../Data/human_breast_cancer/info/expression_filtered.csv")
c <- getSpatial(seu)
fwrite(c, "../Data/human_breast_cancer/info/coordinates.csv")
fwrite(c, "../Data/human_breast_cancer/info/coordinates.csv", row.names=TRUE)
summary(as.vector(seu[["Spatial"]]@counts))
Layers(seu)
summary(as.vector(seu[["Spatial"]]@counts))
summary(as.vectorGetAssayData(seu, assay = "Spatial", layer = "counts")))
summary(as.vector(GetAssayData(seu, assay = "Spatial", layer = "counts")))
summary(as.vector(GetAssayData(seu, assay = "Spatial", layer = "data")))
summary(marker_expr_df[,-1])
summary(marker_expr_df[-1,-1])
str(marker_expr_df)
# getting data and putting it into Seurat
data.dir <- "../Data/human_breast_cancer/raw_data"
seu_raw <- Load10X_Spatial(
data.dir,
filename = "V1_Breast_Cancer_Block_A_Section_1_filtered_feature_bc_matrix.h5",
assay = "Spatial",
slice = "slice1",
bin.size = NULL,
filter.matrix = TRUE,
to.upper = FALSE,
image = NULL,
)
# Quality Control
seu_raw[["percent.mt"]] <- PercentageFeatureSet(seu_raw, pattern = "^MT-")
VlnPlot(seu_raw, features = "percent.mt", pt.size = 0.1)
plot1 <- VlnPlot(seu_raw, features = "nCount_Spatial", pt.size = 0.1) + NoLegend()
plot2 <- SpatialFeaturePlot(seu_raw, features = "nCount_Spatial") + theme(legend.position = "right")
wrap_plots(plot1, plot2)
VlnPlot(seu_raw, features = c("nFeature_Spatial", "nCount_Spatial"), pt.size = 0.1)
seu <- subset(seu_raw, subset =
nFeature_Spatial > 200 &
nFeature_Spatial < 9000 &
percent.mt < 8
)
#compare
# getting info
DefaultAssay(seu) <- "Spatial"
seu <- NormalizeData(object = seu, normalization.method = "LogNormalize", scale.factor = 10000)
seu <- ScaleData(seu , verbose = FALSE)
seu <- FindVariableFeatures(seu)
seu <- preprocessNormalized(seu)
exp <- getExpression(seu)
head(exp)
markers = getExpGenes(seu)
filtered_markers <- markers %>% filter(p_val_adj < 0.05)
# Get list of gene names from filtered markers
marker_genes <- unique(filtered_markers$gene)
marker_expr <- exp[rownames(exp) %in% marker_genes, ,drop = FALSE]
marker_expr_df <- as.data.frame(as.matrix(marker_expr))
marker_expr_df$gene <- rownames(marker_expr_df)
marker_expr_df <- marker_expr_df[, c("gene", setdiff(names(marker_expr_df), "gene"))]
fwrite(marker_expr_df, "../Data/human_breast_cancer/info/expression_filtered.csv")
#spatial
c <- getSpatial(seu)
fwrite(c, "../Data/human_breast_cancer/info/coordinates.csv", row.names=TRUE)
library(Seurat)
library(SeuratData)
library(ggplot2)
library(patchwork)
library(dplyr)
library(hdf5r)
library(rhdf5)
library(data.table)
source("STPrep.R")
# getting data and putting it into Seurat
data.dir <- "../Data/human_breast_cancer/raw_data"
seu_raw <- Load10X_Spatial(
data.dir,
filename = "V1_Breast_Cancer_Block_A_Section_1_filtered_feature_bc_matrix.h5",
assay = "Spatial",
slice = "slice1",
bin.size = NULL,
filter.matrix = TRUE,
to.upper = FALSE,
image = NULL,
)
# Quality Control
seu_raw[["percent.mt"]] <- PercentageFeatureSet(seu_raw, pattern = "^MT-")
VlnPlot(seu_raw, features = "percent.mt", pt.size = 0.1)
plot1 <- VlnPlot(seu_raw, features = "nCount_Spatial", pt.size = 0.1) + NoLegend()
plot2 <- SpatialFeaturePlot(seu_raw, features = "nCount_Spatial") + theme(legend.position = "right")
wrap_plots(plot1, plot2)
VlnPlot(seu_raw, features = c("nFeature_Spatial", "nCount_Spatial"), pt.size = 0.1)
seu <- subset(seu_raw, subset =
nFeature_Spatial > 200 &
nFeature_Spatial < 9000 &
percent.mt < 8
)
getting info
DefaultAssay(seu) <- "Spatial"
seu <- NormalizeData(object = seu, normalization.method = "LogNormalize", scale.factor = 10000)
seu <- ScaleData(seu , verbose = FALSE)
seu <- FindVariableFeatures(seu)
seu <- preprocessNormalized(seu)
exp <- getExpression(seu)
head(exp)
markers = getExpGenes(seu, min.pct=0)
filtered_markers <- markers %>% filter(p_val_adj < 0.05)
p1 <- VlnPlot(seu_raw, features = "nFeature_Spatial") + ggtitle("before QC")
p2 <- VlnPlot(seu, features = "nFeature_Spatial")+ ggtitle("after QC")
p1 + p2
p1 + p2
p1 <- VlnPlot(seu_raw, features = "nFeature_Spatial") + ggtitle("before QC")
p2 <- VlnPlot(seu, features = "nFeature_Spatial")+ ggtitle("after QC")
filtered_markers <- markers %>% filter(p_val_adj < 0.05)
# Get list of gene names from filtered markers
marker_genes <- unique(filtered_markers$gene)
marker_expr <- exp[rownames(exp) %in% marker_genes, ,drop = FALSE]
marker_expr_df <- as.data.frame(as.matrix(marker_expr))
marker_expr_df$gene <- rownames(marker_expr_df)
marker_expr_df <- marker_expr_df[, c("gene", setdiff(names(marker_expr_df), "gene"))]
fwrite(marker_expr_df, "../Data/human_breast_cancer/info/expression_filtered_less.csv")
fwrite(exp, "../Data/human_breast_cancer/info/expression_unfiltered.csv")
fwrite(as.data.table(exp), "../Data/human_breast_cancer/info/expression_unfiltered.csv", row.names=TRUE)
#unfiltered export
exp <- as.data.frame(as.matrix(exp))
exp$gene <- rownames(exp)
exp <- exp[, c("gene", setdiff(names(exp), "gene"))]
fwrite(exp, "../Data/human_breast_cancer/info/expression_unfiltered.csv", row.names=TRUE)
fwrite(exp, "../Data/human_breast_cancer/info/expression_unfiltered.csv")
seu[["RNA"]]@counts["LXA4", ] %in% rownames(seu[["RNA"]]@counts)
seu[["Spatial"]]@counts["LXA4", ] %in% rownames(seu[["RNA"]]@counts)
seu[["Spatial"]]@counts["LXA4", ] %in% rownames(seu[["RNA"]]@data)
VlnPlot(seu, features = "LXA4")
VlnPlot(seu, features = "BGN")
VlnPlot(seu, features = "LXA4")
library(Seurat)
library(SeuratData)
library(ggplot2)
library(patchwork)
library(dplyr)
library(hdf5r)
library(rhdf5)
library(data.table)
source("STPrep.R")
obj <- load("../GSE208253/SeuratObjects/sample_1.Robj")
DimPlot(sample_1)
sample_1[["percent.mt"]] <- PercentageFeatureSet(sample_1, pattern = "^MT-")
VlnPlot(sample_1, features = "percent.mt", pt.size = 0.1)
plot1 <- VlnPlot(seu_raw, features = "nCount_Spatial", pt.size = 0.1) + NoLegend()
plot1 <- VlnPlot(sample_1, features = "nCount_Spatial", pt.size = 0.1) + NoLegend()
VlnPlot(seu_raw, features = c("nFeature_Spatial", "nCount_Spatial"), pt.size = 0.1)
VlnPlot(sample_1, features = c("nFeature_Spatial", "nCount_Spatial"), pt.size = 0.1)
seuratObj <- RunPCA(seuratObj, assay = "SCT", verbose = FALSE)
sample_1 <- RunPCA(sample_1, assay = "SCT", verbose = FALSE)
sample_1 <- NormalizeData(object = sample_1, normalization.method = "LogNormalize", scale.factor = 10000)
sample_1 <- ScaleData(sample_1 , verbose = FALSE)
sample_1 <- FindVariableFeatures(sample_1)
sample_1 <- RunPCA(sample_1, assay = "SCT", verbose = FALSE)
sample_1 <- FindNeighbors(sample_1, reduction = "pca", dims = 1:30)
sample_1 <- FindClusters(sample_1, verbose = FALSE)
sample_1 <- RunUMAP(sample_1, reduction = "pca", dims = 1:30)
DimPlot(sample_1)
SpatialDimPlot(sample_1, group.by = "seurat_clusters") # Example with custom colors
SpatialDimPlot(sample_1, group.by = Idents(sample_1)) # Example with custom colors
sample_1 <- RunUMAP(sample_1, reduction = "umap", dims = 1:30)
sample_1 <- FindClusters(sample_1, verbose = FALSE)
DimPlot(sample_1)
sample_1 <- RunUMAP(sample_1, reduction = "umap", dims = 1:30)
SpatialDimPlot(sample_1, group.by = Idents(sample_1)) # Example with custom colors
SpatialDimPlot(sample_1, cells = WhichCells(pbmc, idents = 1)) # Example with custom colors
SpatialDimPlot(sample_1, cells = WhichCells(sample_1, idents = 1)) # Example with custom colors
img <- Read10X_Image(
image.dir = "../GSE208253/S12/raw_data/spatial",
filter.matrix = TRUE
)
# getting data and putting it into Seurat
data.dir <- "../GSE208253/S12/raw_data"
seu <- Load10X_Spatial(
data.dir,
filename = "filtered_feature_bc_matrix.h5",
assay = "Spatial",
slice = "slice1",
#bin.size = NULL,
#filter.matrix = TRUE,
#to.upper = FALSE,
#image = NULL,
)
img <- Read10X_Image(
image.dir = "../GSE208253/S12/raw_data/spatial",
filter.matrix = TRUE
)
DefaultAssay(seu) <- "Spatial"
seu <- NormalizeData(object = seu, normalization.method = "LogNormalize", scale.factor = 10000)
seu <- ScaleData(seu , verbose = FALSE)
seu <- FindVariableFeatures(seu)
seu <- RunPCA(seu , npcs = 30, verbose = FALSE)
seu <- FindNeighbors(seu, reduction = "pca", dims = 1:20)
seu <- RunUMAP(seu, reduction = "pca", dims = 1:20)
seu <- FindClusters(seu, verbose = TRUE)
SpatialDimPlot(seu)
SpatialDimPlot(seu,group.by = "cluster_identity", image.alpha = 0)
SpatialDimPlot(seu,group.by = "seurat_clusters", image.alpha = 0)
# getting data and putting it into Seurat
data.dir <- "../GSE208253/S1/raw_data"
seu <- Load10X_Spatial(
data.dir,
filename = "filtered_feature_bc_matrix.h5",
assay = "Spatial",
slice = "slice1",
#bin.size = NULL,
#filter.matrix = TRUE,
#to.upper = FALSE,
#image = NULL,
)
img <- Read10X_Image(
image.dir = "../GSE208253/S1/raw_data/spatial",
filter.matrix = TRUE
)
#
#
DefaultAssay(seu) <- "Spatial"
seu <- NormalizeData(object = seu, normalization.method = "LogNormalize", scale.factor = 10000)
seu <- ScaleData(seu , verbose = FALSE)
seu <- FindVariableFeatures(seu)
seu <- RunPCA(seu , npcs = 30, verbose = FALSE)
seu <- FindNeighbors(seu, reduction = "pca", dims = 1:20)
seu <- RunUMAP(seu, reduction = "pca", dims = 1:20)
seu <- FindClusters(seu, verbose = TRUE)
SpatialDimPlot(seu,group.by = "seurat_clusters", image.alpha = 0)
SpatialDimPlot(seu,group.by = "seurat_clusters", image.scale = "hires")
DimPlot(seu)
load("../GSE208253/SeuratObjects/sample_1.Robj")
sample_1@meta.data
seu <- AddMetaData(object = seu,
metadata = sample_1@meta.data,
col.name = "pathologist_annotation")
seu <- AddMetaData(object = seu,
metadata = sample_1@meta.data$pathologist_anno.x,
col.name = "pathologist_annotation")
DimPlot(seu,group.by = "pathologist_annotation")
SpatialDimPlot(seu,group.by = "pathologist_annotation", image.scale = "hires")
anno <- sample_1@meta.data$pathologist_anno.x
anno
rownames(anno)
anno <- sample_1@meta.data$
rownames(anno)
anno <- sample_1@meta.data
rownames(anno)
colnames(anno)
colnames(anno)
rownames(anno) <- anno$Barcode
anno$sample_id.x=NULL
anno$cluster_annotations=NULL
seu <- AddMetaData(object = seu,
metadata = anno,
col.name = "pathologist_annotation")
# getting data and putting it into Seurat
data.dir <- "../GSE208253/S1/raw_data"
seu <- Load10X_Spatial(
data.dir,
filename = "filtered_feature_bc_matrix.h5",
assay = "Spatial",
slice = "slice1",
#bin.size = NULL,
#filter.matrix = TRUE,
#to.upper = FALSE,
#image = NULL,
)
img <- Read10X_Image(
image.dir = "../GSE208253/S1/raw_data/spatial",
filter.matrix = TRUE
)
load("../GSE208253/SeuratObjects/sample_1.Robj")
anno <- sample_1@meta.data
colnames(anno)
rownames(anno) <- anno$Barcode
anno$sample_id.x=NULL
anno$cluster_annotations=NULL
seu <- AddMetaData(object = seu,
metadata = anno,
col.name = "pathologist_annotation")
seu <- AddMetaData(object = seu,
metadata = anno,
col.name = "pathologist.anno.x")
seu <- AddMetaData(object = seu,
metadata = anno,
col.name = "pathologist_anno.x")
load("../GSE208253/SeuratObjects/sample_1.Robj")
anno <- sample_1@meta.data
colnames(anno)
anno$sample_id.x=NULL
anno$cluster_annotations=NULL
seu <- AddMetaData(object = seu,
metadata = anno,
col.name = "pathologist_annotation")
#
DefaultAssay(seu) <- "Spatial"
seu <- NormalizeData(object = seu, normalization.method = "LogNormalize", scale.factor = 10000)
seu <- ScaleData(seu , verbose = FALSE)
seu <- FindVariableFeatures(seu)
seu <- RunPCA(seu , npcs = 30, verbose = FALSE)
seu <- FindNeighbors(seu, reduction = "pca", dims = 1:20)
seu <- RunUMAP(seu, reduction = "pca", dims = 1:20)
seu <- FindClusters(seu, verbose = TRUE)
#ARI
DimPlot(seu,group.by = "pathologist_annotation")
SpatialDimPlot(seu,group.by = "pathologist_annotation", image.scale = "hires")
#ARI
ari_score <- calcARI(
object = seu,
trueCluster = seu$pathologist_annotation,
useCluster = "seurat_clusters"
)
ari_score <- ComputeARI_Ser(
object = seu,
trueCluster = seu$pathologist_annotation,
useCluster = "seurat_clusters"
)
install.packages("remotes")
remotes::install_github("eisascience/scCustFx")
library(scCustFix)
library(scCustFx)
devtools::install_github(repo = 'eisascience/scCustFx', dependencies = TRUE)
library(scCustFx)
library(scCustFx)
#ARI
ari_score <- ComputeARI_Ser(
object = seu,
trueCluster = seu$pathologist_annotation,
useCluster = "seurat_clusters"
)
install.packages(c("Seurat", "aricode"))
library(aricode)
ari_score <- adjustedRandIndex(seu$seurat_clusters, seu$pathologist_annotation)
ari_score <- ARI(seu$seurat_clusters, seu$pathologist_annotation)
seu$pathologist_annotation
seu$seurat_clusters
ari_score <- ARI(seu$seurat_clusters, seu$pathologist_annotation)
clusters <- seu$seurat_clusters
annotations <- seu$pathologist_annotation
valid_idx <- !is.na(clusters) & !is.na(annotations)
ari_score <- ARI(clusters[valid_idx], annotations[valid_idx])
print(ari_score)
SpatialDimPlot(seu,group.by = "seurat_clusters", image.scale = "hires")
SpatialDimPlot(seu,group.by = "seurat_clusters", image.scale = "hires")
library(Seurat)
library(SeuratData)
library(ggplot2)
library(patchwork)
library(dplyr)
library(hdf5r)
library(rhdf5)
library(data.table)
source("STPrep.R")
library(aricode)
SpatialDimPlot(seu,group.by = "seurat_clusters", image.scale = "hires")
DimPlot(seu,group.by = "seurat_clusters")
