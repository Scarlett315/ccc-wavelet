verbose = TRUE
)
head(cluster_markers)
return(cluster_markers)
}
source("STPrep.R")
getExpGenes(seu)
table(Idents(seuratObj))
table(Idents(seu))
preprocessNormalized <- function(seuratObj){
#preprocessing
seuratObj <- RunPCA(seuratObj, assay = "Spatial", verbose = FALSE)
seuratObj <- FindNeighbors(seuratObj, reduction = "pca", dims = 1:30)
seuratObj <- FindClusters(seuratObj, verbose = FALSE)
seuratObj <- RunUMAP(seuratObj, reduction = "pca", dims = 1:30)
print(SpatialFeaturePlot(seuratObj, features = c("SDF4")))
return(seuratObj)
}
source("STPrep.R")
preprocessNormalized(seu)
preprocessNormalized <- function(seuratObj){
#preprocessing
seuratObj <- RunPCA(seuratObj, assay = "Spatial", verbose = TRUE)
seuratObj <- FindNeighbors(seuratObj, reduction = "pca", dims = 1:30)
seuratObj <- FindClusters(seuratObj, verbose = TRUE)
seuratObj <- RunUMAP(seuratObj, reduction = "pca", dims = 1:30)
print(SpatialFeaturePlot(seuratObj, features = c("SDF4")))
return(seuratObj)
}
# getting data and putting it into Seurat
data.dir <- "GSE208253/rawData/S1"
seu <- Load10X_Spatial(
data.dir,
filename = "GSM6339631_s1_filtered_feature_bc_matrix.h5",
assay = "Spatial",
slice = "slice1",
#bin.size = NULL,
#filter.matrix = TRUE,
#to.upper = FALSE,
#image = NULL,
)
img <- Read10X_Image(
image.dir = "GSE208253/rawData/S1/spatial",
filter.matrix = TRUE
)
seu <- preprocessNormalized(seu)
seu <- FindClusters(seu, verbose = TRUE)
seu <- ScaleData(seu , verbose = FALSE)
seu <- NormalizeData(object = seu, normalization.method = "LogNormalize", scale.factor = 10000)
seu <- ScaleData(seu , verbose = FALSE)
seu <- RunPCA(seu , npcs = 30, verbose = FALSE)
seu <- FindVariableFeatures(seu)
seu <- RunUMAP(seu, reduction = "pca", dims = 1:20)
seu <- RunPCA(seu , npcs = 30, verbose = FALSE)
seu <- RunUMAP(seu, reduction = "pca", dims = 1:20)
print(SpatialFeaturePlot(seuratObj, features = c("SDF4")))
print(SpatialFeaturePlot(seu, features = c("SDF4")))
SpatialFeaturePlot(seu, features = c("SDF4"))
seu <- FindClusters(seu, verbose = TRUE)
DefaultAssay(seu) <- "integrated"
DefaultAssay(seu) <- "Spatial"
seu <- FindClusters(seu, verbose = TRUE)
seu <- FindNeighbors(seu, reduction = "pca", dims = 1:20)
seu <- FindClusters(seu, verbose = TRUE)
dimPlot(seu)
DimPlot(seu)
getExpGenes(seu)
getExpGenes <- function(seuratObj){
cluster_markers <- FindAllMarkers(seuratObj,
ident.use = "orig.ident", # or "orig.ident" for samples
only.pos = TRUE, # Only find up-regulated genes
min.pct = 0.5, # Minimum percentage of cells expressing the gene
logfc.threshold = 1, # Minimum log fold-change in expression
p_val_adj < 0.05 # adjusted p-value
)
head(cluster_markers)
return(cluster_markers)
}
source("STPrep.R")
getExpGenes(seu)
getExpGenes <- function(seuratObj){
cluster_markers <- FindAllMarkers(seuratObj,
ident.use = "orig.ident", # or "orig.ident" for samples
only.pos = TRUE, # Only find up-regulated genes
min.pct = 0.5, # Minimum percentage of cells expressing the gene
logfc.threshold = 1, # Minimum log fold-change in expression
)
head(cluster_markers)
return(cluster_markers)
}
markers = getExpGenes(seu)
filtered_markers <- markers %>% filter(p_val_adj < 0.05)
fwrite(filtered_markers, "GSE208253/export/expression_filtered.csv")
marker_genes <- unique(filtered_markers$gene)
marker_expr <- exp[rownames(exp) %in% marker_genes, ]
fwrite(marker_expr, "GSE208253/export/expression_filtered.csv")
fwrite(as.data.table(marker_expr), "GSE208253/export/expression_filtered.csv")
fwrite(as.data.table(marker_expr), "GSE208253/export/expression_filtered.csv", row.names = TRUE)
exp <- getExpression(seu)
marker_expr <- exp[rownames(exp) %in% marker_genes, ,drop = FALSE]
fwrite(as.data.table(as.matrix(marker_expr), "GSE208253/export/expression_filtered.csv", row.names = TRUE)
marker_expr <- exp[rownames(exp) %in% marker_genes, ,drop = FALSE]
fwrite(as.data.table(as.matrix(marker_expr), "GSE208253/export/expression_filtered.csv", row.names = TRUE)
hi
fwrite(as.data.table(as.matrix(marker_expr)), "GSE208253/export/expression_filtered.csv", row.names = TRUE)
marker_expr_df <- as.data.frame(as.matrix(marker_expr))
marker_expr_df$gene <- rownames(marker_expr_df)
marker_expr_df <- marker_expr_df[, c("gene", setdiff(names(marker_expr_df), "gene"))]
fwrite(as.data.table(marker_expr_df, "GSE208253/export/expression_filtered.csv", row.names = TRUE)
hi
fwrite(marker_expr_df, "GSE208253/export/expression_filtered.csv", row.names = TRUE)
obj <- readRDS("GSE208253/SeuratObjects/sample_1.robj")
obj <- load("GSE208253/SeuratObjects/sample_1.robj")
ls()
head(obj@meta.data)  # Check metadata
obj <- readRDS("GSE208253/SeuratObjects/sample_1.robj")
obj <- readRDS("GSE208253/SeuratObjects/sample_1.Robj")
head(sample_1@meta.data)
fwrite(sample_1@meta.data, "GSE208253/export/pathologist_annotations")
fwrite(sample_1@meta.data, "GSE208253/export/pathologist_annotations.csv")
fwrite(sample_1@meta.data, "GSE208253/export/pathologist_annotations.csv", row.names = TRUE)
obj <- load("GSE208253/SeuratObjects/sample_2.Robj")
head(sample_1@meta.data)
fwrite(sample_1@meta.data, "GSE208253/info/S2/S2_pathologist_annotations.csv", row.names = TRUE)
spatial <- getSpatial(sample_2)
Layers(sample2)
Layers(sample_2)
SpatialFeaturePlot(sample_2, features = c("SDF4"))
SpatialFeaturePlot(sample_2, features = c("A2M"))
SpatialFeaturePlot(sample_1, features = c("A2M"))
spatial <- getSpatial(sample_2)
head(sample_2@meta.data)
head(sample_2@meta.data$orig_ident)
head(sample_2@meta.data$orig.ident)
head(sample_2@slice)
print(unique(sample_2@meta.data$slice_column_name))
print(unique(sample_2@meta.data))
fwrite(sample_2@meta.data, "GSE208253/info/S2/S2_pathologist_annotations.csv", row.names = TRUE)
h5ls("GSE208253/rawData/S3/filtered_feature_bc_matrix.h5")
h5ls("GSE208253/rawData/S2/filtered_feature_bc_matrix.h5")
data.dir <- "GSE208253/rawData/S2"
# getting data and putting it into Seurat
data.dir <- "GSE208253/rawData/S2"
seu <- Load10X_Spatial(
data.dir,
filename = "filtered_feature_bc_matrix.h5",
assay = "Spatial",
slice = "slice1",
#bin.size = NULL,
#filter.matrix = TRUE,
#to.upper = FALSE,
#image = NULL,
)
# getting data and putting it into Seurat
data.dir <- "GSE208253/rawData/S2"
seu <- Load10X_Spatial(
data.dir,
filename = "filtered_feature_bc_matrix.h5",
assay = "Spatial",
slice = "slice1",
#bin.size = NULL,
#filter.matrix = TRUE,
#to.upper = FALSE,
#image = NULL,
)
img <- Read10X_Image(
image.dir = "GSE208253/rawData/S2/spatial",
filter.matrix = TRUE
)
#
DefaultAssay(seu) <- "Spatial"
seu <- NormalizeData(object = seu, normalization.method = "LogNormalize", scale.factor = 10000)
seu <- ScaleData(seu , verbose = FALSE)
seu <- RunPCA(seu , npcs = 30, verbose = FALSE)
seu <- ScaleData(seu , verbose = FALSE)
seu <- FindVariableFeatures(seu)
seu <- RunPCA(seu , npcs = 30, verbose = FALSE)
seu <- FindNeighbors(seu, reduction = "pca", dims = 1:20)
seu <- RunUMAP(seu, reduction = "pca", dims = 1:20)
seu <- FindClusters(seu, verbose = TRUE)
DimPlot(seu)
exp <- getExpression(seu)
markers = getExpGenes(seu)
filtered_markers <- markers %>% filter(p_val_adj < 0.05)
marker_genes <- unique(filtered_markers$gene)
marker_expr <- exp[rownames(exp) %in% marker_genes, ,drop = FALSE]
marker_expr_df <- as.data.frame(as.matrix(marker_expr))
marker_expr_df$gene <- rownames(marker_expr_df)
marker_expr_df <- marker_expr_df[, c("gene", setdiff(names(marker_expr_df), "gene"))]
fwrite(marker_expr_df, "GSE208253/info/S2/expression_filtered.csv", row.names = TRUE)
fwrite(c, "coordinates.csv", row.names = TRUE)
markers = getExpGenes(seu)
filtered_markers <- markers %>% filter(p_val_adj < 0.05)
# Get list of gene names from filtered markers
marker_genes <- unique(filtered_markers$gene)
marker_expr <- exp[rownames(exp) %in% marker_genes, ,drop = FALSE]
marker_expr_df <- as.data.frame(as.matrix(marker_expr))
marker_expr_df$gene <- rownames(marker_expr_df)
marker_expr_df <- marker_expr_df[, c("gene", setdiff(names(marker_expr_df), "gene"))]
fwrite(marker_expr_df, "GSE208253/info/S2/expression_filtered.csv", row.names = TRUE)
#not use
fwrite(c, "coordinates.csv", row.names = TRUE)
c <- getSpatial(seu)
fwrite(c, "coordinates.csv", row.names = TRUE)
obj <- load("GSE208253/SeuratObjects/sample_3.Robj")
fwrite(sample_3@meta.data, "GSE208253/info/S3/pathologist_annotations.csv", row.names = TRUE)
#pathologist annotations from Seurat objects
obj <- load("GSE208253/SeuratObjects/sample_4.Robj")
fwrite(sample_4@meta.data, "GSE208253/info/S4/pathologist_annotations.csv", row.names = TRUE)
obj <- load("GSE208253/SeuratObjects/sample_5.Robj")
fwrite(sample_5@meta.data, "GSE208253/info/S5/pathologist_annotations.csv", row.names = TRUE)
#pathologist annotations from Seurat objects
obj <- load("GSE208253/SeuratObjects/sample_6.Robj")
fwrite(sample_5@meta.data, "GSE208253/info/S6/pathologist_annotations.csv", row.names = TRUE)
obj <- load("GSE208253/SeuratObjects/sample_7.Robj")
fwrite(sample_7@meta.data, "GSE208253/info/S7/pathologist_annotations.csv", row.names = TRUE)
obj <- load("GSE208253/SeuratObjects/sample_8.Robj")
fwrite(sample_8@meta.data, "GSE208253/info/S8/pathologist_annotations.csv", row.names = TRUE)
obj <- load("GSE208253/SeuratObjects/sample_9.Robj")
fwrite(sample_9@meta.data, "GSE208253/info/S9/pathologist_annotations.csv", row.names = TRUE)
obj <- load("GSE208253/SeuratObjects/sample_10.Robj")
fwrite(sample_10@meta.data, "GSE208253/info/S10/pathologist_annotations.csv", row.names = TRUE)
obj <- load("GSE208253/SeuratObjects/sample_11.Robj")
fwrite(sample_11@meta.data, "GSE208253/info/S11/pathologist_annotations.csv", row.names = TRUE)
#pathologist annotations from Seurat objects
obj <- load("GSE208253/SeuratObjects/sample_12.Robj")
fwrite(sample_12@meta.data, "GSE208253/info/S12/pathologist_annotations.csv", row.names = TRUE)
h5ls("GSE208253/rawData/S3/filtered_feature_bc_matrix.h5")
# getting data and putting it into Seurat
data.dir <- "GSE208253/rawData/S3"
seu <- Load10X_Spatial(
data.dir,
filename = "filtered_feature_bc_matrix.h5",
assay = "Spatial",
slice = "slice1",
#bin.size = NULL,
#filter.matrix = TRUE,
#to.upper = FALSE,
#image = NULL,
)
img <- Read10X_Image(
image.dir = "GSE208253/rawData/S2/spatial",
filter.matrix = TRUE
)
#
DefaultAssay(seu) <- "Spatial"
seu <- NormalizeData(object = seu, normalization.method = "LogNormalize", scale.factor = 10000)
seu <- ScaleData(seu , verbose = FALSE)
seu <- FindVariableFeatures(seu)
seu <- RunPCA(seu , npcs = 30, verbose = FALSE)
seu <- FindNeighbors(seu, reduction = "pca", dims = 1:20)
seu <- RunUMAP(seu, reduction = "pca", dims = 1:20)
seu <- FindClusters(seu, verbose = TRUE)
DimPlot(seu)
exp <- getExpression(seu)
markers = getExpGenes(seu)
filtered_markers <- markers %>% filter(p_val_adj < 0.05)
# Get list of gene names from filtered markers
marker_genes <- unique(filtered_markers$gene)
marker_expr <- exp[rownames(exp) %in% marker_genes, ,drop = FALSE]
marker_expr_df <- as.data.frame(as.matrix(marker_expr))
marker_expr_df$gene <- rownames(marker_expr_df)
marker_expr_df <- marker_expr_df[, c("gene", setdiff(names(marker_expr_df), "gene"))]
fwrite(marker_expr_df, "GSE208253/info/S3/expression_filtered.csv", row.names = TRUE)
c <- getSpatial(seu)
fwrite(c, "GSE208253/info/S3/coordinates.csv", row.names = TRUE)
h5ls("GSE208253/rawData/S4/filtered_feature_bc_matrix.h5")
# getting data and putting it into Seurat
data.dir <- "GSE208253/rawData/S4"
seu <- Load10X_Spatial(
data.dir,
filename = "filtered_feature_bc_matrix.h5",
assay = "Spatial",
slice = "slice1",
#bin.size = NULL,
#filter.matrix = TRUE,
#to.upper = FALSE,
#image = NULL,
)
img <- Read10X_Image(
image.dir = "GSE208253/rawData/S4/spatial",
filter.matrix = TRUE
)
#
DefaultAssay(seu) <- "Spatial"
seu <- NormalizeData(object = seu, normalization.method = "LogNormalize", scale.factor = 10000)
seu <- ScaleData(seu , verbose = FALSE)
seu <- FindVariableFeatures(seu)
seu <- RunPCA(seu , npcs = 30, verbose = FALSE)
seu <- FindNeighbors(seu, reduction = "pca", dims = 1:20)
seu <- RunUMAP(seu, reduction = "pca", dims = 1:20)
seu <- FindClusters(seu, verbose = TRUE)
DimPlot(seu)
#SpatialFeaturePlot(seu, features = c("SDF4"))
exp <- getExpression(seu)
markers = getExpGenes(seu)
filtered_markers <- markers %>% filter(p_val_adj < 0.05)
# Get list of gene names from filtered markers
marker_genes <- unique(filtered_markers$gene)
marker_expr <- exp[rownames(exp) %in% marker_genes, ,drop = FALSE]
marker_expr_df <- as.data.frame(as.matrix(marker_expr))
marker_expr_df$gene <- rownames(marker_expr_df)
marker_expr_df <- marker_expr_df[, c("gene", setdiff(names(marker_expr_df), "gene"))]
fwrite(marker_expr_df, "GSE208253/info/S4/expression_filtered.csv", row.names = TRUE)
#spatial
c <- getSpatial(seu)
fwrite(c, "GSE208253/info/S4/coordinates.csv", row.names = TRUE)
library(Seurat)
library(SeuratData)
library(ggplot2)
library(patchwork)
library(dplyr)
library(hdf5r)
library(rhdf5)
library(data.table)
source("STPrep.R")
# getting data and putting it into Seurat
data.dir <- "GSE208253/rawData/S5"
seu <- Load10X_Spatial(
data.dir,
filename = "filtered_feature_bc_matrix.h5",
assay = "Spatial",
slice = "slice1",
#bin.size = NULL,
#filter.matrix = TRUE,
#to.upper = FALSE,
#image = NULL,
)
# getting data and putting it into Seurat
data.dir <- "../GSE208253/S5/raw_data"
seu <- Load10X_Spatial(
data.dir,
filename = "filtered_feature_bc_matrix.h5",
assay = "Spatial",
slice = "slice1",
#bin.size = NULL,
#filter.matrix = TRUE,
#to.upper = FALSE,
#image = NULL,
)
img <- Read10X_Image(
image.dir = "../GSE208253/S5/raw_data/spatial",
filter.matrix = TRUE
)
#
DefaultAssay(seu) <- "Spatial"
seu <- NormalizeData(object = seu, normalization.method = "LogNormalize", scale.factor = 10000)
seu <- ScaleData(seu , verbose = FALSE)
seu <- FindVariableFeatures(seu)
seu <- RunPCA(seu , npcs = 30, verbose = FALSE)
seu <- FindNeighbors(seu, reduction = "pca", dims = 1:20)
seu <- RunUMAP(seu, reduction = "pca", dims = 1:20)
seu <- FindClusters(seu, verbose = TRUE)
DimPlot(seu)
exp <- getExpression(seu)
markers = getExpGenes(seu)
c <- getSpatial(seu)
fwrite(c, "GSE208253/info/S4/coordinates.csv", row.names = TRUE)
fwrite(c, "../GSE208253/S4/info/coordinates.csv", row.names = TRUE)
fwrite(c, "../GSE208253/S5/info/coordinates.csv", row.names = TRUE)
# getting data and putting it into Seurat
data.dir <- "../GSE208253/S4/raw_data"
seu <- Load10X_Spatial(
data.dir,
filename = "filtered_feature_bc_matrix.h5",
assay = "Spatial",
slice = "slice1",
#bin.size = NULL,
#filter.matrix = TRUE,
#to.upper = FALSE,
#image = NULL,
)
img <- Read10X_Image(
image.dir = "../GSE208253/S5/raw_data/spatial",
filter.matrix = TRUE
)
c <- getSpatial(seu)
fwrite(c, "../GSE208253/S4/info/coordinates.csv", row.names = TRUE)
# getting data and putting it into Seurat
data.dir <- "../GSE208253/S6/raw_data"
seu <- Load10X_Spatial(
data.dir,
filename = "filtered_feature_bc_matrix.h5",
assay = "Spatial",
slice = "slice1",
#bin.size = NULL,
#filter.matrix = TRUE,
#to.upper = FALSE,
#image = NULL,
)
img <- Read10X_Image(
image.dir = "../GSE208253/S6/raw_data/spatial",
filter.matrix = TRUE
)
c <- getSpatial(seu)
fwrite(c, "../GSE208253/S6/info/coordinates.csv", row.names = TRUE)
c <- getSpatial(seu)
fwrite(c, "../GSE208253/S6/info/coordinates.csv", row.names = TRUE)
obj <- load("../GSE208253/SeuratObjects/sample_6.Robj")
fwrite(sample_12@meta.data, "../GSE208253/S6/info/pathologist_annotations.csv", row.names = TRUE)
obj <- load("../GSE208253/SeuratObjects/sample_6.Robj")
fwrite(sample_6@meta.data, "../GSE208253/S6/info/pathologist_annotations.csv", row.names = TRUE)
# getting data and putting it into Seurat
data.dir <- "../GSE208253/S7/raw_data"
seu <- Load10X_Spatial(
data.dir,
filename = "filtered_feature_bc_matrix.h5",
assay = "Spatial",
slice = "slice1",
#bin.size = NULL,
#filter.matrix = TRUE,
#to.upper = FALSE,
#image = NULL,
)
img <- Read10X_Image(
image.dir = "../GSE208253/S7/raw_data/spatial",
filter.matrix = TRUE
)
#spatial
c <- getSpatial(seu)
fwrite(c, "../GSE208253/S7/info/coordinates.csv", row.names = TRUE)
# getting data and putting it into Seurat
data.dir <- "../GSE208253/S8/raw_data"
seu <- Load10X_Spatial(
data.dir,
filename = "filtered_feature_bc_matrix.h5",
assay = "Spatial",
slice = "slice1",
#bin.size = NULL,
#filter.matrix = TRUE,
#to.upper = FALSE,
#image = NULL,
)
img <- Read10X_Image(
image.dir = "../GSE208253/S8/raw_data/spatial",
filter.matrix = TRUE
)
c <- getSpatial(seu)
fwrite(c, "../GSE208253/S8/info/coordinates.csv", row.names = TRUE)
# getting data and putting it into Seurat
data.dir <- "../GSE208253/S9/raw_data"
seu <- Load10X_Spatial(
data.dir,
filename = "filtered_feature_bc_matrix.h5",
assay = "Spatial",
slice = "slice1",
#bin.size = NULL,
#filter.matrix = TRUE,
#to.upper = FALSE,
#image = NULL,
)
img <- Read10X_Image(
image.dir = "../GSE208253/S9/raw_data/spatial",
filter.matrix = TRUE
)
#spatial
c <- getSpatial(seu)
fwrite(c, "../GSE208253/S9/info/coordinates.csv", row.names = TRUE)
# getting data and putting it into Seurat
data.dir <- "../GSE208253/S10/raw_data"
seu <- Load10X_Spatial(
data.dir,
filename = "filtered_feature_bc_matrix.h5",
assay = "Spatial",
slice = "slice1",
#bin.size = NULL,
#filter.matrix = TRUE,
#to.upper = FALSE,
#image = NULL,
)
img <- Read10X_Image(
image.dir = "../GSE208253/S10/raw_data/spatial",
filter.matrix = TRUE
)
c <- getSpatial(seu)
fwrite(c, "../GSE208253/S10/info/coordinates.csv", row.names = TRUE)
# getting data and putting it into Seurat
data.dir <- "../GSE208253/S11/raw_data"
seu <- Load10X_Spatial(
data.dir,
filename = "filtered_feature_bc_matrix.h5",
assay = "Spatial",
slice = "slice1",
#bin.size = NULL,
#filter.matrix = TRUE,
#to.upper = FALSE,
#image = NULL,
)
img <- Read10X_Image(
image.dir = "../GSE208253/S11/raw_data/spatial",
filter.matrix = TRUE
)
c <- getSpatial(seu)
fwrite(c, "../GSE208253/S11/info/coordinates.csv", row.names = TRUE)
# getting data and putting it into Seurat
data.dir <- "../GSE208253/S12/raw_data"
seu <- Load10X_Spatial(
data.dir,
filename = "filtered_feature_bc_matrix.h5",
assay = "Spatial",
slice = "slice1",
#bin.size = NULL,
#filter.matrix = TRUE,
#to.upper = FALSE,
#image = NULL,
)
img <- Read10X_Image(
image.dir = "../GSE208253/S12/raw_data/spatial",
filter.matrix = TRUE
)
c <- getSpatial(seu)
fwrite(c, "../GSE208253/S12/info/coordinates.csv", row.names = TRUE)
